-- CLEANUP REMAINING SECURITY ISSUES (CORRECTED)

-- 1. Remove duplicate RLS policies (already done in previous migration)
-- Clean up any remaining duplicates on PROFILES table specifically
DROP POLICY IF EXISTS "Insert own profile" ON public.PROFILES;
DROP POLICY IF EXISTS "READ OWN PROFILE" ON public.PROFILES; 
DROP POLICY IF EXISTS "Read own profile" ON public.PROFILES;
DROP POLICY IF EXISTS "Update own profile" ON public.PROFILES;

-- Keep only the consolidated policy for PROFILES
CREATE POLICY "Users can manage their own profile" 
ON public.PROFILES 
FOR ALL 
USING (auth.uid() = id)
WITH CHECK (auth.uid() = id);

-- 2. Add security monitoring tables
CREATE TABLE IF NOT EXISTS public.security_audit_log (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid,
  event_type text NOT NULL,
  event_details jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone DEFAULT now()
);

-- Enable RLS on security audit log
ALTER TABLE public.security_audit_log ENABLE ROW LEVEL SECURITY;

-- Only allow system/admin access to security logs
CREATE POLICY "Restrict access to security logs" 
ON public.security_audit_log 
FOR ALL 
USING (false);

-- Create rate limiting table
CREATE TABLE IF NOT EXISTS public.rate_limits (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid,
  ip_address inet,
  endpoint text NOT NULL,
  request_count integer DEFAULT 1,
  window_start timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  UNIQUE(user_id, ip_address, endpoint, window_start)
);

-- Enable RLS on rate limits
ALTER TABLE public.rate_limits ENABLE ROW LEVEL SECURITY;

-- Users can only see their own rate limit data
CREATE POLICY "Users can view their own rate limits" 
ON public.rate_limits 
FOR SELECT 
USING (auth.uid() = user_id);

-- Function to log security events
CREATE OR REPLACE FUNCTION public.log_security_event(
  p_event_type text,
  p_event_details jsonb DEFAULT NULL,
  p_ip_address inet DEFAULT NULL,
  p_user_agent text DEFAULT NULL
)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $function$
BEGIN
  INSERT INTO public.security_audit_log (
    user_id,
    event_type, 
    event_details,
    ip_address,
    user_agent
  ) VALUES (
    auth.uid(),
    p_event_type,
    p_event_details,
    p_ip_address,
    p_user_agent
  );
END;
$function$;

-- Function to check rate limits
CREATE OR REPLACE FUNCTION public.check_rate_limit(
  p_endpoint text,
  p_ip_address inet,
  p_max_requests integer DEFAULT 100,
  p_window_minutes integer DEFAULT 60
)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $function$
DECLARE
  v_current_count integer;
  v_window_start timestamp with time zone;
BEGIN
  -- Calculate window start time
  v_window_start := date_trunc('hour', now()) + 
                   (EXTRACT(minute FROM now())::integer / p_window_minutes) * 
                   (p_window_minutes || ' minutes')::interval;

  -- Get current request count for this window
  SELECT COALESCE(request_count, 0) INTO v_current_count
  FROM public.rate_limits
  WHERE 
    (user_id = auth.uid() OR ip_address = p_ip_address) AND
    endpoint = p_endpoint AND 
    window_start = v_window_start;

  -- Check if limit exceeded
  IF v_current_count >= p_max_requests THEN
    -- Log rate limit violation
    PERFORM public.log_security_event(
      'rate_limit_exceeded',
      jsonb_build_object(
        'endpoint', p_endpoint,
        'current_count', v_current_count,
        'max_requests', p_max_requests,
        'window_minutes', p_window_minutes
      ),
      p_ip_address
    );
    RETURN false;
  END IF;

  -- Increment counter
  INSERT INTO public.rate_limits (
    user_id,
    ip_address, 
    endpoint,
    request_count,
    window_start
  ) VALUES (
    auth.uid(),
    p_ip_address,
    p_endpoint,
    1,
    v_window_start
  )
  ON CONFLICT (user_id, ip_address, endpoint, window_start)
  DO UPDATE SET 
    request_count = public.rate_limits.request_count + 1;

  RETURN true;
END;
$function$;

-- 3. Add account lockout protection
CREATE TABLE IF NOT EXISTS public.failed_login_attempts (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email text NOT NULL,
  ip_address inet,
  attempt_time timestamp with time zone DEFAULT now(),
  user_agent text
);

-- Enable RLS on failed login attempts
ALTER TABLE public.failed_login_attempts ENABLE ROW LEVEL SECURITY;

-- Only system can access failed login attempts
CREATE POLICY "Restrict access to failed login attempts" 
ON public.failed_login_attempts 
FOR ALL 
USING (false);

-- Function to track failed login attempts
CREATE OR REPLACE FUNCTION public.track_failed_login(
  p_email text,
  p_ip_address inet DEFAULT NULL,
  p_user_agent text DEFAULT NULL
)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $function$
DECLARE
  v_recent_attempts integer;
  v_lockout_threshold integer := 5;
  v_lockout_window interval := '15 minutes';
BEGIN
  -- Count recent failed attempts
  SELECT COUNT(*) INTO v_recent_attempts
  FROM public.failed_login_attempts
  WHERE 
    email = p_email AND 
    attempt_time > (now() - v_lockout_window);

  -- Check if account should be locked
  IF v_recent_attempts >= v_lockout_threshold THEN
    -- Log security event
    PERFORM public.log_security_event(
      'account_lockout',
      jsonb_build_object(
        'email', p_email,
        'recent_attempts', v_recent_attempts,
        'threshold', v_lockout_threshold
      ),
      p_ip_address,
      p_user_agent
    );
    RETURN false; -- Account is locked
  END IF;

  -- Record this failed attempt
  INSERT INTO public.failed_login_attempts (
    email,
    ip_address,
    user_agent
  ) VALUES (
    p_email,
    p_ip_address,
    p_user_agent
  );

  RETURN true; -- Account is not locked
END;
$function$;